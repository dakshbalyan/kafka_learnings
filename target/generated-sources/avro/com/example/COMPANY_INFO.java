/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class COMPANY_INFO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7773076068961256820L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"COMPANY_INFO\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"COMPANY_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"DEPARTMENT\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"POST\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<COMPANY_INFO> ENCODER =
      new BinaryMessageEncoder<COMPANY_INFO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<COMPANY_INFO> DECODER =
      new BinaryMessageDecoder<COMPANY_INFO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<COMPANY_INFO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<COMPANY_INFO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<COMPANY_INFO>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this COMPANY_INFO to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a COMPANY_INFO from a ByteBuffer. */
  public static COMPANY_INFO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String COMPANY_NAME;
   private java.lang.String DEPARTMENT;
   private java.lang.String POST;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public COMPANY_INFO() {}

  /**
   * All-args constructor.
   * @param COMPANY_NAME The new value for COMPANY_NAME
   * @param DEPARTMENT The new value for DEPARTMENT
   * @param POST The new value for POST
   */
  public COMPANY_INFO(java.lang.String COMPANY_NAME, java.lang.String DEPARTMENT, java.lang.String POST) {
    this.COMPANY_NAME = COMPANY_NAME;
    this.DEPARTMENT = DEPARTMENT;
    this.POST = POST;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return COMPANY_NAME;
    case 1: return DEPARTMENT;
    case 2: return POST;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: COMPANY_NAME = (java.lang.String)value$; break;
    case 1: DEPARTMENT = (java.lang.String)value$; break;
    case 2: POST = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'COMPANY_NAME' field.
   * @return The value of the 'COMPANY_NAME' field.
   */
  public java.lang.String getCOMPANYNAME() {
    return COMPANY_NAME;
  }


  /**
   * Gets the value of the 'DEPARTMENT' field.
   * @return The value of the 'DEPARTMENT' field.
   */
  public java.lang.String getDEPARTMENT() {
    return DEPARTMENT;
  }


  /**
   * Gets the value of the 'POST' field.
   * @return The value of the 'POST' field.
   */
  public java.lang.String getPOST() {
    return POST;
  }


  /**
   * Creates a new COMPANY_INFO RecordBuilder.
   * @return A new COMPANY_INFO RecordBuilder
   */
  public static com.example.COMPANY_INFO.Builder newBuilder() {
    return new com.example.COMPANY_INFO.Builder();
  }

  /**
   * Creates a new COMPANY_INFO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new COMPANY_INFO RecordBuilder
   */
  public static com.example.COMPANY_INFO.Builder newBuilder(com.example.COMPANY_INFO.Builder other) {
    return new com.example.COMPANY_INFO.Builder(other);
  }

  /**
   * Creates a new COMPANY_INFO RecordBuilder by copying an existing COMPANY_INFO instance.
   * @param other The existing instance to copy.
   * @return A new COMPANY_INFO RecordBuilder
   */
  public static com.example.COMPANY_INFO.Builder newBuilder(com.example.COMPANY_INFO other) {
    return new com.example.COMPANY_INFO.Builder(other);
  }

  /**
   * RecordBuilder for COMPANY_INFO instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<COMPANY_INFO>
    implements org.apache.avro.data.RecordBuilder<COMPANY_INFO> {

    private java.lang.String COMPANY_NAME;
    private java.lang.String DEPARTMENT;
    private java.lang.String POST;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.COMPANY_INFO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.COMPANY_NAME)) {
        this.COMPANY_NAME = data().deepCopy(fields()[0].schema(), other.COMPANY_NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DEPARTMENT)) {
        this.DEPARTMENT = data().deepCopy(fields()[1].schema(), other.DEPARTMENT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.POST)) {
        this.POST = data().deepCopy(fields()[2].schema(), other.POST);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing COMPANY_INFO instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.COMPANY_INFO other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.COMPANY_NAME)) {
        this.COMPANY_NAME = data().deepCopy(fields()[0].schema(), other.COMPANY_NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.DEPARTMENT)) {
        this.DEPARTMENT = data().deepCopy(fields()[1].schema(), other.DEPARTMENT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.POST)) {
        this.POST = data().deepCopy(fields()[2].schema(), other.POST);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'COMPANY_NAME' field.
      * @return The value.
      */
    public java.lang.String getCOMPANYNAME() {
      return COMPANY_NAME;
    }

    /**
      * Sets the value of the 'COMPANY_NAME' field.
      * @param value The value of 'COMPANY_NAME'.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder setCOMPANYNAME(java.lang.String value) {
      validate(fields()[0], value);
      this.COMPANY_NAME = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'COMPANY_NAME' field has been set.
      * @return True if the 'COMPANY_NAME' field has been set, false otherwise.
      */
    public boolean hasCOMPANYNAME() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'COMPANY_NAME' field.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder clearCOMPANYNAME() {
      COMPANY_NAME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'DEPARTMENT' field.
      * @return The value.
      */
    public java.lang.String getDEPARTMENT() {
      return DEPARTMENT;
    }

    /**
      * Sets the value of the 'DEPARTMENT' field.
      * @param value The value of 'DEPARTMENT'.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder setDEPARTMENT(java.lang.String value) {
      validate(fields()[1], value);
      this.DEPARTMENT = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'DEPARTMENT' field has been set.
      * @return True if the 'DEPARTMENT' field has been set, false otherwise.
      */
    public boolean hasDEPARTMENT() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'DEPARTMENT' field.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder clearDEPARTMENT() {
      DEPARTMENT = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'POST' field.
      * @return The value.
      */
    public java.lang.String getPOST() {
      return POST;
    }

    /**
      * Sets the value of the 'POST' field.
      * @param value The value of 'POST'.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder setPOST(java.lang.String value) {
      validate(fields()[2], value);
      this.POST = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'POST' field has been set.
      * @return True if the 'POST' field has been set, false otherwise.
      */
    public boolean hasPOST() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'POST' field.
      * @return This builder.
      */
    public com.example.COMPANY_INFO.Builder clearPOST() {
      POST = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public COMPANY_INFO build() {
      try {
        COMPANY_INFO record = new COMPANY_INFO();
        record.COMPANY_NAME = fieldSetFlags()[0] ? this.COMPANY_NAME : (java.lang.String) defaultValue(fields()[0]);
        record.DEPARTMENT = fieldSetFlags()[1] ? this.DEPARTMENT : (java.lang.String) defaultValue(fields()[1]);
        record.POST = fieldSetFlags()[2] ? this.POST : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<COMPANY_INFO>
    WRITER$ = (org.apache.avro.io.DatumWriter<COMPANY_INFO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<COMPANY_INFO>
    READER$ = (org.apache.avro.io.DatumReader<COMPANY_INFO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

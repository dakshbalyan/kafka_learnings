/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.ksql.avro_schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KsqlDataSourceSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2239800067416991749L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KsqlDataSourceSchema\",\"namespace\":\"io.confluent.ksql.avro_schemas\",\"fields\":[{\"name\":\"EMP_ID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_FIRST_NAME\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_LAST_NAME\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_ADDR_STREET\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_ADDR_CITY\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_ADDR_STATE\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_BASE_SALARY\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"EMP_BONUS\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"COMPANY_NAME\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_DEPARTMENT\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"EMP_POST\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KsqlDataSourceSchema> ENCODER =
      new BinaryMessageEncoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KsqlDataSourceSchema> DECODER =
      new BinaryMessageDecoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<KsqlDataSourceSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<KsqlDataSourceSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<KsqlDataSourceSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this KsqlDataSourceSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a KsqlDataSourceSchema from a ByteBuffer. */
  public static KsqlDataSourceSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String EMP_ID;
   private java.lang.String EMP_FIRST_NAME;
   private java.lang.String EMP_LAST_NAME;
   private java.lang.String EMP_ADDR_STREET;
   private java.lang.String EMP_ADDR_CITY;
   private java.lang.String EMP_ADDR_STATE;
   private java.lang.Integer EMP_BASE_SALARY;
   private java.lang.Integer EMP_BONUS;
   private java.lang.String COMPANY_NAME;
   private java.lang.String EMP_DEPARTMENT;
   private java.lang.String EMP_POST;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KsqlDataSourceSchema() {}

  /**
   * All-args constructor.
   * @param EMP_ID The new value for EMP_ID
   * @param EMP_FIRST_NAME The new value for EMP_FIRST_NAME
   * @param EMP_LAST_NAME The new value for EMP_LAST_NAME
   * @param EMP_ADDR_STREET The new value for EMP_ADDR_STREET
   * @param EMP_ADDR_CITY The new value for EMP_ADDR_CITY
   * @param EMP_ADDR_STATE The new value for EMP_ADDR_STATE
   * @param EMP_BASE_SALARY The new value for EMP_BASE_SALARY
   * @param EMP_BONUS The new value for EMP_BONUS
   * @param COMPANY_NAME The new value for COMPANY_NAME
   * @param EMP_DEPARTMENT The new value for EMP_DEPARTMENT
   * @param EMP_POST The new value for EMP_POST
   */
  public KsqlDataSourceSchema(java.lang.String EMP_ID, java.lang.String EMP_FIRST_NAME, java.lang.String EMP_LAST_NAME, java.lang.String EMP_ADDR_STREET, java.lang.String EMP_ADDR_CITY, java.lang.String EMP_ADDR_STATE, java.lang.Integer EMP_BASE_SALARY, java.lang.Integer EMP_BONUS, java.lang.String COMPANY_NAME, java.lang.String EMP_DEPARTMENT, java.lang.String EMP_POST) {
    this.EMP_ID = EMP_ID;
    this.EMP_FIRST_NAME = EMP_FIRST_NAME;
    this.EMP_LAST_NAME = EMP_LAST_NAME;
    this.EMP_ADDR_STREET = EMP_ADDR_STREET;
    this.EMP_ADDR_CITY = EMP_ADDR_CITY;
    this.EMP_ADDR_STATE = EMP_ADDR_STATE;
    this.EMP_BASE_SALARY = EMP_BASE_SALARY;
    this.EMP_BONUS = EMP_BONUS;
    this.COMPANY_NAME = COMPANY_NAME;
    this.EMP_DEPARTMENT = EMP_DEPARTMENT;
    this.EMP_POST = EMP_POST;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EMP_ID;
    case 1: return EMP_FIRST_NAME;
    case 2: return EMP_LAST_NAME;
    case 3: return EMP_ADDR_STREET;
    case 4: return EMP_ADDR_CITY;
    case 5: return EMP_ADDR_STATE;
    case 6: return EMP_BASE_SALARY;
    case 7: return EMP_BONUS;
    case 8: return COMPANY_NAME;
    case 9: return EMP_DEPARTMENT;
    case 10: return EMP_POST;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EMP_ID = (java.lang.String)value$; break;
    case 1: EMP_FIRST_NAME = (java.lang.String)value$; break;
    case 2: EMP_LAST_NAME = (java.lang.String)value$; break;
    case 3: EMP_ADDR_STREET = (java.lang.String)value$; break;
    case 4: EMP_ADDR_CITY = (java.lang.String)value$; break;
    case 5: EMP_ADDR_STATE = (java.lang.String)value$; break;
    case 6: EMP_BASE_SALARY = (java.lang.Integer)value$; break;
    case 7: EMP_BONUS = (java.lang.Integer)value$; break;
    case 8: COMPANY_NAME = (java.lang.String)value$; break;
    case 9: EMP_DEPARTMENT = (java.lang.String)value$; break;
    case 10: EMP_POST = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'EMP_ID' field.
   * @return The value of the 'EMP_ID' field.
   */
  public java.lang.String getEMPID() {
    return EMP_ID;
  }


  /**
   * Gets the value of the 'EMP_FIRST_NAME' field.
   * @return The value of the 'EMP_FIRST_NAME' field.
   */
  public java.lang.String getEMPFIRSTNAME() {
    return EMP_FIRST_NAME;
  }


  /**
   * Gets the value of the 'EMP_LAST_NAME' field.
   * @return The value of the 'EMP_LAST_NAME' field.
   */
  public java.lang.String getEMPLASTNAME() {
    return EMP_LAST_NAME;
  }


  /**
   * Gets the value of the 'EMP_ADDR_STREET' field.
   * @return The value of the 'EMP_ADDR_STREET' field.
   */
  public java.lang.String getEMPADDRSTREET() {
    return EMP_ADDR_STREET;
  }


  /**
   * Gets the value of the 'EMP_ADDR_CITY' field.
   * @return The value of the 'EMP_ADDR_CITY' field.
   */
  public java.lang.String getEMPADDRCITY() {
    return EMP_ADDR_CITY;
  }


  /**
   * Gets the value of the 'EMP_ADDR_STATE' field.
   * @return The value of the 'EMP_ADDR_STATE' field.
   */
  public java.lang.String getEMPADDRSTATE() {
    return EMP_ADDR_STATE;
  }


  /**
   * Gets the value of the 'EMP_BASE_SALARY' field.
   * @return The value of the 'EMP_BASE_SALARY' field.
   */
  public java.lang.Integer getEMPBASESALARY() {
    return EMP_BASE_SALARY;
  }


  /**
   * Gets the value of the 'EMP_BONUS' field.
   * @return The value of the 'EMP_BONUS' field.
   */
  public java.lang.Integer getEMPBONUS() {
    return EMP_BONUS;
  }


  /**
   * Gets the value of the 'COMPANY_NAME' field.
   * @return The value of the 'COMPANY_NAME' field.
   */
  public java.lang.String getCOMPANYNAME() {
    return COMPANY_NAME;
  }


  /**
   * Gets the value of the 'EMP_DEPARTMENT' field.
   * @return The value of the 'EMP_DEPARTMENT' field.
   */
  public java.lang.String getEMPDEPARTMENT() {
    return EMP_DEPARTMENT;
  }


  /**
   * Gets the value of the 'EMP_POST' field.
   * @return The value of the 'EMP_POST' field.
   */
  public java.lang.String getEMPPOST() {
    return EMP_POST;
  }


  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder() {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder();
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder other) {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder(other);
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing KsqlDataSourceSchema instance.
   * @param other The existing instance to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder newBuilder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema other) {
    return new io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder(other);
  }

  /**
   * RecordBuilder for KsqlDataSourceSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KsqlDataSourceSchema>
    implements org.apache.avro.data.RecordBuilder<KsqlDataSourceSchema> {

    private java.lang.String EMP_ID;
    private java.lang.String EMP_FIRST_NAME;
    private java.lang.String EMP_LAST_NAME;
    private java.lang.String EMP_ADDR_STREET;
    private java.lang.String EMP_ADDR_CITY;
    private java.lang.String EMP_ADDR_STATE;
    private java.lang.Integer EMP_BASE_SALARY;
    private java.lang.Integer EMP_BONUS;
    private java.lang.String COMPANY_NAME;
    private java.lang.String EMP_DEPARTMENT;
    private java.lang.String EMP_POST;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EMP_ID)) {
        this.EMP_ID = data().deepCopy(fields()[0].schema(), other.EMP_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EMP_FIRST_NAME)) {
        this.EMP_FIRST_NAME = data().deepCopy(fields()[1].schema(), other.EMP_FIRST_NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EMP_LAST_NAME)) {
        this.EMP_LAST_NAME = data().deepCopy(fields()[2].schema(), other.EMP_LAST_NAME);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EMP_ADDR_STREET)) {
        this.EMP_ADDR_STREET = data().deepCopy(fields()[3].schema(), other.EMP_ADDR_STREET);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.EMP_ADDR_CITY)) {
        this.EMP_ADDR_CITY = data().deepCopy(fields()[4].schema(), other.EMP_ADDR_CITY);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.EMP_ADDR_STATE)) {
        this.EMP_ADDR_STATE = data().deepCopy(fields()[5].schema(), other.EMP_ADDR_STATE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.EMP_BASE_SALARY)) {
        this.EMP_BASE_SALARY = data().deepCopy(fields()[6].schema(), other.EMP_BASE_SALARY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.EMP_BONUS)) {
        this.EMP_BONUS = data().deepCopy(fields()[7].schema(), other.EMP_BONUS);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.COMPANY_NAME)) {
        this.COMPANY_NAME = data().deepCopy(fields()[8].schema(), other.COMPANY_NAME);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.EMP_DEPARTMENT)) {
        this.EMP_DEPARTMENT = data().deepCopy(fields()[9].schema(), other.EMP_DEPARTMENT);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.EMP_POST)) {
        this.EMP_POST = data().deepCopy(fields()[10].schema(), other.EMP_POST);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KsqlDataSourceSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.ksql.avro_schemas.KsqlDataSourceSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.EMP_ID)) {
        this.EMP_ID = data().deepCopy(fields()[0].schema(), other.EMP_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EMP_FIRST_NAME)) {
        this.EMP_FIRST_NAME = data().deepCopy(fields()[1].schema(), other.EMP_FIRST_NAME);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EMP_LAST_NAME)) {
        this.EMP_LAST_NAME = data().deepCopy(fields()[2].schema(), other.EMP_LAST_NAME);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EMP_ADDR_STREET)) {
        this.EMP_ADDR_STREET = data().deepCopy(fields()[3].schema(), other.EMP_ADDR_STREET);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.EMP_ADDR_CITY)) {
        this.EMP_ADDR_CITY = data().deepCopy(fields()[4].schema(), other.EMP_ADDR_CITY);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.EMP_ADDR_STATE)) {
        this.EMP_ADDR_STATE = data().deepCopy(fields()[5].schema(), other.EMP_ADDR_STATE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.EMP_BASE_SALARY)) {
        this.EMP_BASE_SALARY = data().deepCopy(fields()[6].schema(), other.EMP_BASE_SALARY);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.EMP_BONUS)) {
        this.EMP_BONUS = data().deepCopy(fields()[7].schema(), other.EMP_BONUS);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.COMPANY_NAME)) {
        this.COMPANY_NAME = data().deepCopy(fields()[8].schema(), other.COMPANY_NAME);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.EMP_DEPARTMENT)) {
        this.EMP_DEPARTMENT = data().deepCopy(fields()[9].schema(), other.EMP_DEPARTMENT);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.EMP_POST)) {
        this.EMP_POST = data().deepCopy(fields()[10].schema(), other.EMP_POST);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'EMP_ID' field.
      * @return The value.
      */
    public java.lang.String getEMPID() {
      return EMP_ID;
    }

    /**
      * Sets the value of the 'EMP_ID' field.
      * @param value The value of 'EMP_ID'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPID(java.lang.String value) {
      validate(fields()[0], value);
      this.EMP_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_ID' field has been set.
      * @return True if the 'EMP_ID' field has been set, false otherwise.
      */
    public boolean hasEMPID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'EMP_ID' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPID() {
      EMP_ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_FIRST_NAME' field.
      * @return The value.
      */
    public java.lang.String getEMPFIRSTNAME() {
      return EMP_FIRST_NAME;
    }

    /**
      * Sets the value of the 'EMP_FIRST_NAME' field.
      * @param value The value of 'EMP_FIRST_NAME'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPFIRSTNAME(java.lang.String value) {
      validate(fields()[1], value);
      this.EMP_FIRST_NAME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_FIRST_NAME' field has been set.
      * @return True if the 'EMP_FIRST_NAME' field has been set, false otherwise.
      */
    public boolean hasEMPFIRSTNAME() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EMP_FIRST_NAME' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPFIRSTNAME() {
      EMP_FIRST_NAME = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_LAST_NAME' field.
      * @return The value.
      */
    public java.lang.String getEMPLASTNAME() {
      return EMP_LAST_NAME;
    }

    /**
      * Sets the value of the 'EMP_LAST_NAME' field.
      * @param value The value of 'EMP_LAST_NAME'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPLASTNAME(java.lang.String value) {
      validate(fields()[2], value);
      this.EMP_LAST_NAME = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_LAST_NAME' field has been set.
      * @return True if the 'EMP_LAST_NAME' field has been set, false otherwise.
      */
    public boolean hasEMPLASTNAME() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EMP_LAST_NAME' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPLASTNAME() {
      EMP_LAST_NAME = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_ADDR_STREET' field.
      * @return The value.
      */
    public java.lang.String getEMPADDRSTREET() {
      return EMP_ADDR_STREET;
    }

    /**
      * Sets the value of the 'EMP_ADDR_STREET' field.
      * @param value The value of 'EMP_ADDR_STREET'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPADDRSTREET(java.lang.String value) {
      validate(fields()[3], value);
      this.EMP_ADDR_STREET = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_ADDR_STREET' field has been set.
      * @return True if the 'EMP_ADDR_STREET' field has been set, false otherwise.
      */
    public boolean hasEMPADDRSTREET() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'EMP_ADDR_STREET' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPADDRSTREET() {
      EMP_ADDR_STREET = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_ADDR_CITY' field.
      * @return The value.
      */
    public java.lang.String getEMPADDRCITY() {
      return EMP_ADDR_CITY;
    }

    /**
      * Sets the value of the 'EMP_ADDR_CITY' field.
      * @param value The value of 'EMP_ADDR_CITY'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPADDRCITY(java.lang.String value) {
      validate(fields()[4], value);
      this.EMP_ADDR_CITY = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_ADDR_CITY' field has been set.
      * @return True if the 'EMP_ADDR_CITY' field has been set, false otherwise.
      */
    public boolean hasEMPADDRCITY() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'EMP_ADDR_CITY' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPADDRCITY() {
      EMP_ADDR_CITY = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_ADDR_STATE' field.
      * @return The value.
      */
    public java.lang.String getEMPADDRSTATE() {
      return EMP_ADDR_STATE;
    }

    /**
      * Sets the value of the 'EMP_ADDR_STATE' field.
      * @param value The value of 'EMP_ADDR_STATE'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPADDRSTATE(java.lang.String value) {
      validate(fields()[5], value);
      this.EMP_ADDR_STATE = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_ADDR_STATE' field has been set.
      * @return True if the 'EMP_ADDR_STATE' field has been set, false otherwise.
      */
    public boolean hasEMPADDRSTATE() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'EMP_ADDR_STATE' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPADDRSTATE() {
      EMP_ADDR_STATE = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_BASE_SALARY' field.
      * @return The value.
      */
    public java.lang.Integer getEMPBASESALARY() {
      return EMP_BASE_SALARY;
    }

    /**
      * Sets the value of the 'EMP_BASE_SALARY' field.
      * @param value The value of 'EMP_BASE_SALARY'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPBASESALARY(java.lang.Integer value) {
      validate(fields()[6], value);
      this.EMP_BASE_SALARY = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_BASE_SALARY' field has been set.
      * @return True if the 'EMP_BASE_SALARY' field has been set, false otherwise.
      */
    public boolean hasEMPBASESALARY() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'EMP_BASE_SALARY' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPBASESALARY() {
      EMP_BASE_SALARY = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_BONUS' field.
      * @return The value.
      */
    public java.lang.Integer getEMPBONUS() {
      return EMP_BONUS;
    }

    /**
      * Sets the value of the 'EMP_BONUS' field.
      * @param value The value of 'EMP_BONUS'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPBONUS(java.lang.Integer value) {
      validate(fields()[7], value);
      this.EMP_BONUS = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_BONUS' field has been set.
      * @return True if the 'EMP_BONUS' field has been set, false otherwise.
      */
    public boolean hasEMPBONUS() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'EMP_BONUS' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPBONUS() {
      EMP_BONUS = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'COMPANY_NAME' field.
      * @return The value.
      */
    public java.lang.String getCOMPANYNAME() {
      return COMPANY_NAME;
    }

    /**
      * Sets the value of the 'COMPANY_NAME' field.
      * @param value The value of 'COMPANY_NAME'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setCOMPANYNAME(java.lang.String value) {
      validate(fields()[8], value);
      this.COMPANY_NAME = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'COMPANY_NAME' field has been set.
      * @return True if the 'COMPANY_NAME' field has been set, false otherwise.
      */
    public boolean hasCOMPANYNAME() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'COMPANY_NAME' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearCOMPANYNAME() {
      COMPANY_NAME = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_DEPARTMENT' field.
      * @return The value.
      */
    public java.lang.String getEMPDEPARTMENT() {
      return EMP_DEPARTMENT;
    }

    /**
      * Sets the value of the 'EMP_DEPARTMENT' field.
      * @param value The value of 'EMP_DEPARTMENT'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPDEPARTMENT(java.lang.String value) {
      validate(fields()[9], value);
      this.EMP_DEPARTMENT = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_DEPARTMENT' field has been set.
      * @return True if the 'EMP_DEPARTMENT' field has been set, false otherwise.
      */
    public boolean hasEMPDEPARTMENT() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'EMP_DEPARTMENT' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPDEPARTMENT() {
      EMP_DEPARTMENT = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'EMP_POST' field.
      * @return The value.
      */
    public java.lang.String getEMPPOST() {
      return EMP_POST;
    }

    /**
      * Sets the value of the 'EMP_POST' field.
      * @param value The value of 'EMP_POST'.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder setEMPPOST(java.lang.String value) {
      validate(fields()[10], value);
      this.EMP_POST = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'EMP_POST' field has been set.
      * @return True if the 'EMP_POST' field has been set, false otherwise.
      */
    public boolean hasEMPPOST() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'EMP_POST' field.
      * @return This builder.
      */
    public io.confluent.ksql.avro_schemas.KsqlDataSourceSchema.Builder clearEMPPOST() {
      EMP_POST = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KsqlDataSourceSchema build() {
      try {
        KsqlDataSourceSchema record = new KsqlDataSourceSchema();
        record.EMP_ID = fieldSetFlags()[0] ? this.EMP_ID : (java.lang.String) defaultValue(fields()[0]);
        record.EMP_FIRST_NAME = fieldSetFlags()[1] ? this.EMP_FIRST_NAME : (java.lang.String) defaultValue(fields()[1]);
        record.EMP_LAST_NAME = fieldSetFlags()[2] ? this.EMP_LAST_NAME : (java.lang.String) defaultValue(fields()[2]);
        record.EMP_ADDR_STREET = fieldSetFlags()[3] ? this.EMP_ADDR_STREET : (java.lang.String) defaultValue(fields()[3]);
        record.EMP_ADDR_CITY = fieldSetFlags()[4] ? this.EMP_ADDR_CITY : (java.lang.String) defaultValue(fields()[4]);
        record.EMP_ADDR_STATE = fieldSetFlags()[5] ? this.EMP_ADDR_STATE : (java.lang.String) defaultValue(fields()[5]);
        record.EMP_BASE_SALARY = fieldSetFlags()[6] ? this.EMP_BASE_SALARY : (java.lang.Integer) defaultValue(fields()[6]);
        record.EMP_BONUS = fieldSetFlags()[7] ? this.EMP_BONUS : (java.lang.Integer) defaultValue(fields()[7]);
        record.COMPANY_NAME = fieldSetFlags()[8] ? this.COMPANY_NAME : (java.lang.String) defaultValue(fields()[8]);
        record.EMP_DEPARTMENT = fieldSetFlags()[9] ? this.EMP_DEPARTMENT : (java.lang.String) defaultValue(fields()[9]);
        record.EMP_POST = fieldSetFlags()[10] ? this.EMP_POST : (java.lang.String) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KsqlDataSourceSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<KsqlDataSourceSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KsqlDataSourceSchema>
    READER$ = (org.apache.avro.io.DatumReader<KsqlDataSourceSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

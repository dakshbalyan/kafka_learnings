/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SALARY extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4703721221195443103L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SALARY\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"BASE_SALARY\",\"type\":\"int\"},{\"name\":\"BONUS\",\"type\":\"int\"},{\"name\":\"INCENTIVES\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SALARY> ENCODER =
      new BinaryMessageEncoder<SALARY>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SALARY> DECODER =
      new BinaryMessageDecoder<SALARY>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SALARY> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SALARY> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SALARY>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SALARY to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SALARY from a ByteBuffer. */
  public static SALARY fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int BASE_SALARY;
   private int BONUS;
   private java.lang.Boolean INCENTIVES;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SALARY() {}

  /**
   * All-args constructor.
   * @param BASE_SALARY The new value for BASE_SALARY
   * @param BONUS The new value for BONUS
   * @param INCENTIVES The new value for INCENTIVES
   */
  public SALARY(java.lang.Integer BASE_SALARY, java.lang.Integer BONUS, java.lang.Boolean INCENTIVES) {
    this.BASE_SALARY = BASE_SALARY;
    this.BONUS = BONUS;
    this.INCENTIVES = INCENTIVES;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return BASE_SALARY;
    case 1: return BONUS;
    case 2: return INCENTIVES;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: BASE_SALARY = (java.lang.Integer)value$; break;
    case 1: BONUS = (java.lang.Integer)value$; break;
    case 2: INCENTIVES = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'BASE_SALARY' field.
   * @return The value of the 'BASE_SALARY' field.
   */
  public java.lang.Integer getBASESALARY() {
    return BASE_SALARY;
  }


  /**
   * Gets the value of the 'BONUS' field.
   * @return The value of the 'BONUS' field.
   */
  public java.lang.Integer getBONUS() {
    return BONUS;
  }


  /**
   * Gets the value of the 'INCENTIVES' field.
   * @return The value of the 'INCENTIVES' field.
   */
  public java.lang.Boolean getINCENTIVES() {
    return INCENTIVES;
  }


  /**
   * Creates a new SALARY RecordBuilder.
   * @return A new SALARY RecordBuilder
   */
  public static com.example.SALARY.Builder newBuilder() {
    return new com.example.SALARY.Builder();
  }

  /**
   * Creates a new SALARY RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SALARY RecordBuilder
   */
  public static com.example.SALARY.Builder newBuilder(com.example.SALARY.Builder other) {
    return new com.example.SALARY.Builder(other);
  }

  /**
   * Creates a new SALARY RecordBuilder by copying an existing SALARY instance.
   * @param other The existing instance to copy.
   * @return A new SALARY RecordBuilder
   */
  public static com.example.SALARY.Builder newBuilder(com.example.SALARY other) {
    return new com.example.SALARY.Builder(other);
  }

  /**
   * RecordBuilder for SALARY instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SALARY>
    implements org.apache.avro.data.RecordBuilder<SALARY> {

    private int BASE_SALARY;
    private int BONUS;
    private java.lang.Boolean INCENTIVES;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.SALARY.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.BASE_SALARY)) {
        this.BASE_SALARY = data().deepCopy(fields()[0].schema(), other.BASE_SALARY);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BONUS)) {
        this.BONUS = data().deepCopy(fields()[1].schema(), other.BONUS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.INCENTIVES)) {
        this.INCENTIVES = data().deepCopy(fields()[2].schema(), other.INCENTIVES);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SALARY instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.SALARY other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.BASE_SALARY)) {
        this.BASE_SALARY = data().deepCopy(fields()[0].schema(), other.BASE_SALARY);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BONUS)) {
        this.BONUS = data().deepCopy(fields()[1].schema(), other.BONUS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.INCENTIVES)) {
        this.INCENTIVES = data().deepCopy(fields()[2].schema(), other.INCENTIVES);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'BASE_SALARY' field.
      * @return The value.
      */
    public java.lang.Integer getBASESALARY() {
      return BASE_SALARY;
    }

    /**
      * Sets the value of the 'BASE_SALARY' field.
      * @param value The value of 'BASE_SALARY'.
      * @return This builder.
      */
    public com.example.SALARY.Builder setBASESALARY(int value) {
      validate(fields()[0], value);
      this.BASE_SALARY = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'BASE_SALARY' field has been set.
      * @return True if the 'BASE_SALARY' field has been set, false otherwise.
      */
    public boolean hasBASESALARY() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'BASE_SALARY' field.
      * @return This builder.
      */
    public com.example.SALARY.Builder clearBASESALARY() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'BONUS' field.
      * @return The value.
      */
    public java.lang.Integer getBONUS() {
      return BONUS;
    }

    /**
      * Sets the value of the 'BONUS' field.
      * @param value The value of 'BONUS'.
      * @return This builder.
      */
    public com.example.SALARY.Builder setBONUS(int value) {
      validate(fields()[1], value);
      this.BONUS = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'BONUS' field has been set.
      * @return True if the 'BONUS' field has been set, false otherwise.
      */
    public boolean hasBONUS() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'BONUS' field.
      * @return This builder.
      */
    public com.example.SALARY.Builder clearBONUS() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCENTIVES' field.
      * @return The value.
      */
    public java.lang.Boolean getINCENTIVES() {
      return INCENTIVES;
    }

    /**
      * Sets the value of the 'INCENTIVES' field.
      * @param value The value of 'INCENTIVES'.
      * @return This builder.
      */
    public com.example.SALARY.Builder setINCENTIVES(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.INCENTIVES = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'INCENTIVES' field has been set.
      * @return True if the 'INCENTIVES' field has been set, false otherwise.
      */
    public boolean hasINCENTIVES() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'INCENTIVES' field.
      * @return This builder.
      */
    public com.example.SALARY.Builder clearINCENTIVES() {
      INCENTIVES = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SALARY build() {
      try {
        SALARY record = new SALARY();
        record.BASE_SALARY = fieldSetFlags()[0] ? this.BASE_SALARY : (java.lang.Integer) defaultValue(fields()[0]);
        record.BONUS = fieldSetFlags()[1] ? this.BONUS : (java.lang.Integer) defaultValue(fields()[1]);
        record.INCENTIVES = fieldSetFlags()[2] ? this.INCENTIVES : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SALARY>
    WRITER$ = (org.apache.avro.io.DatumWriter<SALARY>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SALARY>
    READER$ = (org.apache.avro.io.DatumReader<SALARY>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

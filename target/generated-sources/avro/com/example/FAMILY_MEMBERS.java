/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FAMILY_MEMBERS extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7109101780547351979L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FAMILY_MEMBERS\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"NAME\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"RELATION\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"AGE\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FAMILY_MEMBERS> ENCODER =
      new BinaryMessageEncoder<FAMILY_MEMBERS>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FAMILY_MEMBERS> DECODER =
      new BinaryMessageDecoder<FAMILY_MEMBERS>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FAMILY_MEMBERS> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FAMILY_MEMBERS> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FAMILY_MEMBERS>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FAMILY_MEMBERS to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FAMILY_MEMBERS from a ByteBuffer. */
  public static FAMILY_MEMBERS fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String NAME;
   private java.lang.String RELATION;
   private java.lang.Integer AGE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FAMILY_MEMBERS() {}

  /**
   * All-args constructor.
   * @param NAME The new value for NAME
   * @param RELATION The new value for RELATION
   * @param AGE The new value for AGE
   */
  public FAMILY_MEMBERS(java.lang.String NAME, java.lang.String RELATION, java.lang.Integer AGE) {
    this.NAME = NAME;
    this.RELATION = RELATION;
    this.AGE = AGE;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return NAME;
    case 1: return RELATION;
    case 2: return AGE;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: NAME = (java.lang.String)value$; break;
    case 1: RELATION = (java.lang.String)value$; break;
    case 2: AGE = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public java.lang.String getNAME() {
    return NAME;
  }


  /**
   * Gets the value of the 'RELATION' field.
   * @return The value of the 'RELATION' field.
   */
  public java.lang.String getRELATION() {
    return RELATION;
  }


  /**
   * Gets the value of the 'AGE' field.
   * @return The value of the 'AGE' field.
   */
  public java.lang.Integer getAGE() {
    return AGE;
  }


  /**
   * Creates a new FAMILY_MEMBERS RecordBuilder.
   * @return A new FAMILY_MEMBERS RecordBuilder
   */
  public static com.example.FAMILY_MEMBERS.Builder newBuilder() {
    return new com.example.FAMILY_MEMBERS.Builder();
  }

  /**
   * Creates a new FAMILY_MEMBERS RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FAMILY_MEMBERS RecordBuilder
   */
  public static com.example.FAMILY_MEMBERS.Builder newBuilder(com.example.FAMILY_MEMBERS.Builder other) {
    return new com.example.FAMILY_MEMBERS.Builder(other);
  }

  /**
   * Creates a new FAMILY_MEMBERS RecordBuilder by copying an existing FAMILY_MEMBERS instance.
   * @param other The existing instance to copy.
   * @return A new FAMILY_MEMBERS RecordBuilder
   */
  public static com.example.FAMILY_MEMBERS.Builder newBuilder(com.example.FAMILY_MEMBERS other) {
    return new com.example.FAMILY_MEMBERS.Builder(other);
  }

  /**
   * RecordBuilder for FAMILY_MEMBERS instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FAMILY_MEMBERS>
    implements org.apache.avro.data.RecordBuilder<FAMILY_MEMBERS> {

    private java.lang.String NAME;
    private java.lang.String RELATION;
    private java.lang.Integer AGE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.FAMILY_MEMBERS.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.NAME)) {
        this.NAME = data().deepCopy(fields()[0].schema(), other.NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.RELATION)) {
        this.RELATION = data().deepCopy(fields()[1].schema(), other.RELATION);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AGE)) {
        this.AGE = data().deepCopy(fields()[2].schema(), other.AGE);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FAMILY_MEMBERS instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.FAMILY_MEMBERS other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.NAME)) {
        this.NAME = data().deepCopy(fields()[0].schema(), other.NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.RELATION)) {
        this.RELATION = data().deepCopy(fields()[1].schema(), other.RELATION);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AGE)) {
        this.AGE = data().deepCopy(fields()[2].schema(), other.AGE);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public java.lang.String getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder setNAME(java.lang.String value) {
      validate(fields()[0], value);
      this.NAME = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder clearNAME() {
      NAME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'RELATION' field.
      * @return The value.
      */
    public java.lang.String getRELATION() {
      return RELATION;
    }

    /**
      * Sets the value of the 'RELATION' field.
      * @param value The value of 'RELATION'.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder setRELATION(java.lang.String value) {
      validate(fields()[1], value);
      this.RELATION = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'RELATION' field has been set.
      * @return True if the 'RELATION' field has been set, false otherwise.
      */
    public boolean hasRELATION() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'RELATION' field.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder clearRELATION() {
      RELATION = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'AGE' field.
      * @return The value.
      */
    public java.lang.Integer getAGE() {
      return AGE;
    }

    /**
      * Sets the value of the 'AGE' field.
      * @param value The value of 'AGE'.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder setAGE(java.lang.Integer value) {
      validate(fields()[2], value);
      this.AGE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'AGE' field has been set.
      * @return True if the 'AGE' field has been set, false otherwise.
      */
    public boolean hasAGE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'AGE' field.
      * @return This builder.
      */
    public com.example.FAMILY_MEMBERS.Builder clearAGE() {
      AGE = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FAMILY_MEMBERS build() {
      try {
        FAMILY_MEMBERS record = new FAMILY_MEMBERS();
        record.NAME = fieldSetFlags()[0] ? this.NAME : (java.lang.String) defaultValue(fields()[0]);
        record.RELATION = fieldSetFlags()[1] ? this.RELATION : (java.lang.String) defaultValue(fields()[1]);
        record.AGE = fieldSetFlags()[2] ? this.AGE : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FAMILY_MEMBERS>
    WRITER$ = (org.apache.avro.io.DatumWriter<FAMILY_MEMBERS>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FAMILY_MEMBERS>
    READER$ = (org.apache.avro.io.DatumReader<FAMILY_MEMBERS>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

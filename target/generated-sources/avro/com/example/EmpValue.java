/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** for learning flattening and windowing */
@org.apache.avro.specific.AvroGenerated
public class EmpValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -131827112523191470L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmpValue\",\"namespace\":\"com.example\",\"doc\":\"for learning flattening and windowing\",\"fields\":[{\"name\":\"empID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"NAME\",\"type\":{\"type\":\"record\",\"name\":\"FULL_NAME\",\"fields\":[{\"name\":\"FIRST_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"LAST_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"ADDRESS\",\"type\":{\"type\":\"record\",\"name\":\"PERSONAL_ADDRESS\",\"fields\":[{\"name\":\"STREET\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CITY\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"STATE\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"SALARY\",\"type\":{\"type\":\"record\",\"name\":\"SALARY\",\"fields\":[{\"name\":\"BASE_SALARY\",\"type\":\"int\"},{\"name\":\"BONUS\",\"type\":\"int\"},{\"name\":\"INCENTIVES\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}},{\"name\":\"COMPANY\",\"type\":{\"type\":\"record\",\"name\":\"COMPANY_INFO\",\"fields\":[{\"name\":\"COMPANY_NAME\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"DEPARTMENT\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"POST\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"FAMILY\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FAMILY_MEMBERS\",\"fields\":[{\"name\":\"NAME\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"RELATION\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"AGE\",\"type\":[\"null\",\"int\"],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmpValue> ENCODER =
      new BinaryMessageEncoder<EmpValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmpValue> DECODER =
      new BinaryMessageDecoder<EmpValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmpValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmpValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmpValue>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmpValue to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmpValue from a ByteBuffer. */
  public static EmpValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String empID;
   private com.example.FULL_NAME NAME;
   private com.example.PERSONAL_ADDRESS ADDRESS;
   private com.example.SALARY SALARY;
   private com.example.COMPANY_INFO COMPANY;
   private java.util.List<com.example.FAMILY_MEMBERS> FAMILY;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmpValue() {}

  /**
   * All-args constructor.
   * @param empID The new value for empID
   * @param NAME The new value for NAME
   * @param ADDRESS The new value for ADDRESS
   * @param SALARY The new value for SALARY
   * @param COMPANY The new value for COMPANY
   * @param FAMILY The new value for FAMILY
   */
  public EmpValue(java.lang.String empID, com.example.FULL_NAME NAME, com.example.PERSONAL_ADDRESS ADDRESS, com.example.SALARY SALARY, com.example.COMPANY_INFO COMPANY, java.util.List<com.example.FAMILY_MEMBERS> FAMILY) {
    this.empID = empID;
    this.NAME = NAME;
    this.ADDRESS = ADDRESS;
    this.SALARY = SALARY;
    this.COMPANY = COMPANY;
    this.FAMILY = FAMILY;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empID;
    case 1: return NAME;
    case 2: return ADDRESS;
    case 3: return SALARY;
    case 4: return COMPANY;
    case 5: return FAMILY;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empID = (java.lang.String)value$; break;
    case 1: NAME = (com.example.FULL_NAME)value$; break;
    case 2: ADDRESS = (com.example.PERSONAL_ADDRESS)value$; break;
    case 3: SALARY = (com.example.SALARY)value$; break;
    case 4: COMPANY = (com.example.COMPANY_INFO)value$; break;
    case 5: FAMILY = (java.util.List<com.example.FAMILY_MEMBERS>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'empID' field.
   * @return The value of the 'empID' field.
   */
  public java.lang.String getEmpID() {
    return empID;
  }


  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public com.example.FULL_NAME getNAME() {
    return NAME;
  }


  /**
   * Gets the value of the 'ADDRESS' field.
   * @return The value of the 'ADDRESS' field.
   */
  public com.example.PERSONAL_ADDRESS getADDRESS() {
    return ADDRESS;
  }


  /**
   * Gets the value of the 'SALARY' field.
   * @return The value of the 'SALARY' field.
   */
  public com.example.SALARY getSALARY() {
    return SALARY;
  }


  /**
   * Gets the value of the 'COMPANY' field.
   * @return The value of the 'COMPANY' field.
   */
  public com.example.COMPANY_INFO getCOMPANY() {
    return COMPANY;
  }


  /**
   * Gets the value of the 'FAMILY' field.
   * @return The value of the 'FAMILY' field.
   */
  public java.util.List<com.example.FAMILY_MEMBERS> getFAMILY() {
    return FAMILY;
  }


  /**
   * Creates a new EmpValue RecordBuilder.
   * @return A new EmpValue RecordBuilder
   */
  public static com.example.EmpValue.Builder newBuilder() {
    return new com.example.EmpValue.Builder();
  }

  /**
   * Creates a new EmpValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmpValue RecordBuilder
   */
  public static com.example.EmpValue.Builder newBuilder(com.example.EmpValue.Builder other) {
    return new com.example.EmpValue.Builder(other);
  }

  /**
   * Creates a new EmpValue RecordBuilder by copying an existing EmpValue instance.
   * @param other The existing instance to copy.
   * @return A new EmpValue RecordBuilder
   */
  public static com.example.EmpValue.Builder newBuilder(com.example.EmpValue other) {
    return new com.example.EmpValue.Builder(other);
  }

  /**
   * RecordBuilder for EmpValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmpValue>
    implements org.apache.avro.data.RecordBuilder<EmpValue> {

    private java.lang.String empID;
    private com.example.FULL_NAME NAME;
    private com.example.FULL_NAME.Builder NAMEBuilder;
    private com.example.PERSONAL_ADDRESS ADDRESS;
    private com.example.PERSONAL_ADDRESS.Builder ADDRESSBuilder;
    private com.example.SALARY SALARY;
    private com.example.SALARY.Builder SALARYBuilder;
    private com.example.COMPANY_INFO COMPANY;
    private com.example.COMPANY_INFO.Builder COMPANYBuilder;
    private java.util.List<com.example.FAMILY_MEMBERS> FAMILY;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.EmpValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empID)) {
        this.empID = data().deepCopy(fields()[0].schema(), other.empID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      if (other.hasNAMEBuilder()) {
        this.NAMEBuilder = com.example.FULL_NAME.newBuilder(other.getNAMEBuilder());
      }
      if (isValidValue(fields()[2], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[2].schema(), other.ADDRESS);
        fieldSetFlags()[2] = true;
      }
      if (other.hasADDRESSBuilder()) {
        this.ADDRESSBuilder = com.example.PERSONAL_ADDRESS.newBuilder(other.getADDRESSBuilder());
      }
      if (isValidValue(fields()[3], other.SALARY)) {
        this.SALARY = data().deepCopy(fields()[3].schema(), other.SALARY);
        fieldSetFlags()[3] = true;
      }
      if (other.hasSALARYBuilder()) {
        this.SALARYBuilder = com.example.SALARY.newBuilder(other.getSALARYBuilder());
      }
      if (isValidValue(fields()[4], other.COMPANY)) {
        this.COMPANY = data().deepCopy(fields()[4].schema(), other.COMPANY);
        fieldSetFlags()[4] = true;
      }
      if (other.hasCOMPANYBuilder()) {
        this.COMPANYBuilder = com.example.COMPANY_INFO.newBuilder(other.getCOMPANYBuilder());
      }
      if (isValidValue(fields()[5], other.FAMILY)) {
        this.FAMILY = data().deepCopy(fields()[5].schema(), other.FAMILY);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmpValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.EmpValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.empID)) {
        this.empID = data().deepCopy(fields()[0].schema(), other.empID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NAME)) {
        this.NAME = data().deepCopy(fields()[1].schema(), other.NAME);
        fieldSetFlags()[1] = true;
      }
      this.NAMEBuilder = null;
      if (isValidValue(fields()[2], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[2].schema(), other.ADDRESS);
        fieldSetFlags()[2] = true;
      }
      this.ADDRESSBuilder = null;
      if (isValidValue(fields()[3], other.SALARY)) {
        this.SALARY = data().deepCopy(fields()[3].schema(), other.SALARY);
        fieldSetFlags()[3] = true;
      }
      this.SALARYBuilder = null;
      if (isValidValue(fields()[4], other.COMPANY)) {
        this.COMPANY = data().deepCopy(fields()[4].schema(), other.COMPANY);
        fieldSetFlags()[4] = true;
      }
      this.COMPANYBuilder = null;
      if (isValidValue(fields()[5], other.FAMILY)) {
        this.FAMILY = data().deepCopy(fields()[5].schema(), other.FAMILY);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'empID' field.
      * @return The value.
      */
    public java.lang.String getEmpID() {
      return empID;
    }

    /**
      * Sets the value of the 'empID' field.
      * @param value The value of 'empID'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setEmpID(java.lang.String value) {
      validate(fields()[0], value);
      this.empID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empID' field has been set.
      * @return True if the 'empID' field has been set, false otherwise.
      */
    public boolean hasEmpID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empID' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearEmpID() {
      empID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public com.example.FULL_NAME getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setNAME(com.example.FULL_NAME value) {
      validate(fields()[1], value);
      this.NAMEBuilder = null;
      this.NAME = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'NAME' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.FULL_NAME.Builder getNAMEBuilder() {
      if (NAMEBuilder == null) {
        if (hasNAME()) {
          setNAMEBuilder(com.example.FULL_NAME.newBuilder(NAME));
        } else {
          setNAMEBuilder(com.example.FULL_NAME.newBuilder());
        }
      }
      return NAMEBuilder;
    }

    /**
     * Sets the Builder instance for the 'NAME' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.example.EmpValue.Builder setNAMEBuilder(com.example.FULL_NAME.Builder value) {
      clearNAME();
      NAMEBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'NAME' field has an active Builder instance
     * @return True if the 'NAME' field has an active Builder instance
     */
    public boolean hasNAMEBuilder() {
      return NAMEBuilder != null;
    }

    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearNAME() {
      NAME = null;
      NAMEBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ADDRESS' field.
      * @return The value.
      */
    public com.example.PERSONAL_ADDRESS getADDRESS() {
      return ADDRESS;
    }

    /**
      * Sets the value of the 'ADDRESS' field.
      * @param value The value of 'ADDRESS'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setADDRESS(com.example.PERSONAL_ADDRESS value) {
      validate(fields()[2], value);
      this.ADDRESSBuilder = null;
      this.ADDRESS = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ADDRESS' field has been set.
      * @return True if the 'ADDRESS' field has been set, false otherwise.
      */
    public boolean hasADDRESS() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'ADDRESS' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.PERSONAL_ADDRESS.Builder getADDRESSBuilder() {
      if (ADDRESSBuilder == null) {
        if (hasADDRESS()) {
          setADDRESSBuilder(com.example.PERSONAL_ADDRESS.newBuilder(ADDRESS));
        } else {
          setADDRESSBuilder(com.example.PERSONAL_ADDRESS.newBuilder());
        }
      }
      return ADDRESSBuilder;
    }

    /**
     * Sets the Builder instance for the 'ADDRESS' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.example.EmpValue.Builder setADDRESSBuilder(com.example.PERSONAL_ADDRESS.Builder value) {
      clearADDRESS();
      ADDRESSBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ADDRESS' field has an active Builder instance
     * @return True if the 'ADDRESS' field has an active Builder instance
     */
    public boolean hasADDRESSBuilder() {
      return ADDRESSBuilder != null;
    }

    /**
      * Clears the value of the 'ADDRESS' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearADDRESS() {
      ADDRESS = null;
      ADDRESSBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'SALARY' field.
      * @return The value.
      */
    public com.example.SALARY getSALARY() {
      return SALARY;
    }

    /**
      * Sets the value of the 'SALARY' field.
      * @param value The value of 'SALARY'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setSALARY(com.example.SALARY value) {
      validate(fields()[3], value);
      this.SALARYBuilder = null;
      this.SALARY = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'SALARY' field has been set.
      * @return True if the 'SALARY' field has been set, false otherwise.
      */
    public boolean hasSALARY() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'SALARY' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.SALARY.Builder getSALARYBuilder() {
      if (SALARYBuilder == null) {
        if (hasSALARY()) {
          setSALARYBuilder(com.example.SALARY.newBuilder(SALARY));
        } else {
          setSALARYBuilder(com.example.SALARY.newBuilder());
        }
      }
      return SALARYBuilder;
    }

    /**
     * Sets the Builder instance for the 'SALARY' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.example.EmpValue.Builder setSALARYBuilder(com.example.SALARY.Builder value) {
      clearSALARY();
      SALARYBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'SALARY' field has an active Builder instance
     * @return True if the 'SALARY' field has an active Builder instance
     */
    public boolean hasSALARYBuilder() {
      return SALARYBuilder != null;
    }

    /**
      * Clears the value of the 'SALARY' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearSALARY() {
      SALARY = null;
      SALARYBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'COMPANY' field.
      * @return The value.
      */
    public com.example.COMPANY_INFO getCOMPANY() {
      return COMPANY;
    }

    /**
      * Sets the value of the 'COMPANY' field.
      * @param value The value of 'COMPANY'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setCOMPANY(com.example.COMPANY_INFO value) {
      validate(fields()[4], value);
      this.COMPANYBuilder = null;
      this.COMPANY = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'COMPANY' field has been set.
      * @return True if the 'COMPANY' field has been set, false otherwise.
      */
    public boolean hasCOMPANY() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'COMPANY' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.COMPANY_INFO.Builder getCOMPANYBuilder() {
      if (COMPANYBuilder == null) {
        if (hasCOMPANY()) {
          setCOMPANYBuilder(com.example.COMPANY_INFO.newBuilder(COMPANY));
        } else {
          setCOMPANYBuilder(com.example.COMPANY_INFO.newBuilder());
        }
      }
      return COMPANYBuilder;
    }

    /**
     * Sets the Builder instance for the 'COMPANY' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.example.EmpValue.Builder setCOMPANYBuilder(com.example.COMPANY_INFO.Builder value) {
      clearCOMPANY();
      COMPANYBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'COMPANY' field has an active Builder instance
     * @return True if the 'COMPANY' field has an active Builder instance
     */
    public boolean hasCOMPANYBuilder() {
      return COMPANYBuilder != null;
    }

    /**
      * Clears the value of the 'COMPANY' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearCOMPANY() {
      COMPANY = null;
      COMPANYBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'FAMILY' field.
      * @return The value.
      */
    public java.util.List<com.example.FAMILY_MEMBERS> getFAMILY() {
      return FAMILY;
    }

    /**
      * Sets the value of the 'FAMILY' field.
      * @param value The value of 'FAMILY'.
      * @return This builder.
      */
    public com.example.EmpValue.Builder setFAMILY(java.util.List<com.example.FAMILY_MEMBERS> value) {
      validate(fields()[5], value);
      this.FAMILY = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'FAMILY' field has been set.
      * @return True if the 'FAMILY' field has been set, false otherwise.
      */
    public boolean hasFAMILY() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'FAMILY' field.
      * @return This builder.
      */
    public com.example.EmpValue.Builder clearFAMILY() {
      FAMILY = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmpValue build() {
      try {
        EmpValue record = new EmpValue();
        record.empID = fieldSetFlags()[0] ? this.empID : (java.lang.String) defaultValue(fields()[0]);
        if (NAMEBuilder != null) {
          record.NAME = this.NAMEBuilder.build();
        } else {
          record.NAME = fieldSetFlags()[1] ? this.NAME : (com.example.FULL_NAME) defaultValue(fields()[1]);
        }
        if (ADDRESSBuilder != null) {
          record.ADDRESS = this.ADDRESSBuilder.build();
        } else {
          record.ADDRESS = fieldSetFlags()[2] ? this.ADDRESS : (com.example.PERSONAL_ADDRESS) defaultValue(fields()[2]);
        }
        if (SALARYBuilder != null) {
          record.SALARY = this.SALARYBuilder.build();
        } else {
          record.SALARY = fieldSetFlags()[3] ? this.SALARY : (com.example.SALARY) defaultValue(fields()[3]);
        }
        if (COMPANYBuilder != null) {
          record.COMPANY = this.COMPANYBuilder.build();
        } else {
          record.COMPANY = fieldSetFlags()[4] ? this.COMPANY : (com.example.COMPANY_INFO) defaultValue(fields()[4]);
        }
        record.FAMILY = fieldSetFlags()[5] ? this.FAMILY : (java.util.List<com.example.FAMILY_MEMBERS>) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmpValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmpValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmpValue>
    READER$ = (org.apache.avro.io.DatumReader<EmpValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
